name: ADO-self-hosted-pipeline

# This is the default pipeline for a self-hosted Windows agent on Azure Devops.

# Install flyway cli on agent, add flyway to PATH: https://download.red-gate.com/maven/release/org/flywaydb/enterprise/flyway-commandline
# Install python3 on agent and add pip to PATH if staticCodeAnalysis is set to true
# Make sure this file is in the same directory as the migrations folder of the Flyway Enterprise project. 
# Provision a dev, shadow, build databases, as well as any target environments that need to be created: https://documentation.red-gate.com/fd/proof-of-concept-checklist-152109292.html
# Further instructions if needed here: https://documentation.red-gate.com/fd/self-hosted-windows-agent-yaml-pipeline-in-azure-devops-158564470.html
# For video reference, see: https://www.red-gate.com/hub/university/courses/flyway/flyway-desktop/setting-up-a-flyway-desktop-project/basic-flyway-desktop-project-setup-and-configuration

trigger:
  branches:
    include:
      - release
  paths:
    include:
      - migrations/*

variables:

  # This is the relative path to the migrations folder in your project, such as:
  # $(System.DefaultWorkingDirectory)\project
  # The default is to have the migrations folder in the same directory as the yml file
  WORKING_DIRECTORY: $(System.DefaultWorkingDirectory)

  FLYWAY: 'flyway -user="$(userName)" -password="$(password)" -baselineOnMigrate=true -licenseKey=$(FLYWAY_LICENSE_KEY) -configFiles="$(WORKING_DIRECTORY)\flyway.conf" -locations="filesystem:$(WORKING_DIRECTORY)\migrations"'
  
  BUILD_NAME: 'Build'
  RELEASE_PREVIEW: 'Release-Preview.sql'
  DRIFT_AND_CHANGE_REPORT: 'Drift-And-Change-Report.html'
  DRIFT_AND_CHANGE_REPORT_DISPLAY_NAME: 'Drift And Change Report'
  
  ADF_ARTIFACT_NAME: 'ADFArmTemplates'
  # Place following in rg_flyway_vars variable group
  # FLYWAY_LICENSE_KEY
  # BASELINE_VERSION - make match the baseline version in your project
  # FIRST_UNDO_SCRIPT match the first undo version in your project
  # AGENT_POOL is the agent pool your pipeline will use - default to default
  group: rg_flyway_vars

stages:
  - stage: Build
    pool: $(AGENT_POOL)
    displayName: 'Deploy Build'
    jobs:
    - job: build_flyway
      displayName: 'Build Flyway'
      variables:
      - group: rg_build_credentials_variable_group
      - group: rg_flyway_vars
      steps:
        - script: '$(FLYWAY) clean info -url="$(target_database_JDBC)"'
          failOnStderr: true
          displayName: 'Clean Build DB'
          env:
            FLYWAY_CLEAN_DISABLED: false

        - script: '$(FLYWAY) migrate info -url="$(target_database_JDBC)" -baselineVersion=$(BASELINE_VERSION)'
          failOnStderr: true
          displayName: 'Validate Migrate Scripts'

        - script: '$(FLYWAY) undo info -url="$(target_database_JDBC)" -target="$(FIRST_UNDO_SCRIPT)"?'
          continueOnError: true
          displayName: 'Validate Undo Scripts'

        - task: CopyFiles@2
          inputs:
            targetFolder: '$(System.ArtifactsDirectory)' 

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Build Artifact'
          inputs:
            ArtifactName: '$(BUILD_NAME)'
            PathtoPublish: '$(System.ArtifactsDirectory)'

    - job: build_adf
      displayName: 'Build ADF Templates'
      variables:
        - name: adfDevSubscription
          value: '<DEV_AZURE_SUBSCRIPTION_ID>'
        - name: adfDevResourceGroup
          value: '<DEV_ADF_RESOURCE_GROUP_NAME>'
        - name: adfDevFactoryName
          value: '<DEV_ADF_NAME>'
      steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '12.x'
        displayName: 'Install Node.js'
      - script: |
          npm --prefix '$(System.DefaultWorkingDirectory)/adf' install
        displayName: 'Install npm package'
      - script: |
          npm --prefix '$(System.DefaultWorkingDirectory)/adf' run build validate $(System.DefaultWorkingDirectory)/adf /subscriptions/$(adfDevSubscription)/resourceGroups/$(adfDevResourceGroup)/providers/Microsoft.DataFactory/factories/$(adfDevFactoryName)
        displayName: 'Validate'
      - script: |
          npm --prefix '$(System.DefaultWorkingDirectory)/adf' run build export $(System.DefaultWorkingDirectory)/adf /subscriptions/$(adfDevSubscription)/resourceGroups/$(adfDevResourceGroup)/providers/Microsoft.DataFactory/factories/$(adfDevFactoryName) 'ArmTemplate'
        displayName: 'Validate and Generate ARM template'
      - publish: '$(System.DefaultWorkingDirectory)/adf/ArmTemplate'
        artifact: '$(ADF_ARTIFACT_NAME)'

  - template: ../templates/deploy-flyway.yml
    parameters:
      stageName: 'test_flyway'
      agentPool: $(AGENT_POOL)
      dependsOn: 'Build'
      displayName: 'Deploy Test Flyway'
      pauseForCodeReview: false
      generateDriftAndChangeReport: true                     
      failReleaseIfDriftDetected: false                      
      staticCodeAnalysis: false                              
      variableGroupName: 'rg_test_credentials_variable_group'
      artifactName: '$(BUILD_NAME)'
      flyway: $(FLYWAY)
      workingDirectory: $(WORKING_DIRECTORY)
  
  - template: ../templates/deploy-adf.yml
    parameters:
      stageName: 'test_adf'
      agentPool: $(AGENT_POOL)
      dependsOn: 'test_flyway'
      displayName: 'Deploy Test ADF'
      artifactName: '$(ADF_ARTIFACT_NAME)'
      # This variable group has to contain the variable 'overrideParameters'
      variableGroupName: '<DEV_ADF_VARIABLE_GROUP_NAME>'
      serviceConnection: '<DEV_SERVICE_CONNECTION_NAME>'
      subscriptionId: '<DEV_AZURE_SUBSCRIPTION_ID>'
      resourceGroupName: '<DEV_ADF_RESOURCE_GROUP_NAME>'
      location: '<DEV_ADF_LOCATION>'

  - template: ../templates/deploy-flyway.yml
    parameters:
      stageName: 'prod_flyway'
      agentPool: $(AGENT_POOL)
      dependsOn: 'test_adf'
      displayName: 'Deploy Prod Flyway'
      pauseForCodeReview: true
      generateDriftAndChangeReport: true                     
      failReleaseIfDriftDetected: true                      
      staticCodeAnalysis: false                              
      variableGroupName: 'rg_prod_credentials_variable_group'
      artifactName: '$(BUILD_NAME)'
      flyway: $(FLYWAY)
      workingDirectory: $(WORKING_DIRECTORY)
  
  - template: ../templates/deploy-adf.yml
    parameters:
      stageName: 'prod_adf'
      agentPool: $(AGENT_POOL)
      dependsOn: 'prod_flyway'
      displayName: 'Deploy Prod ADF'
      artifactName: '$(ADF_ARTIFACT_NAME)'
      # This variable group has to contain the variable 'overrideParameters'
      variableGroupName: '<PROD_ADF_VARIABLE_GROUP_NAME>'
      serviceConnection: '<PROD_SERVICE_CONNECTION_NAME>'
      subscriptionId: '<PROD_AZURE_SUBSCRIPTION_ID>'
      resourceGroupName: '<PROD_ADF_RESOURCE_GROUP_NAME>'
      location: '<PROD_ADF_LOCATION>'
  